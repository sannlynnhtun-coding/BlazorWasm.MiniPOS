@page "/"

<div class="row">
    <div class="col-md-6">
        @* <div id="BasicColumnChart"></div> *@
        @if (Series is not null)
        {
            <PageBasicColumnChart 
                Id="BasicColumnChart" 
                Title="Top 5 selling products of current Year by each Month" 
                Series="Series" />
        }
    </div>
    <div class="col-md-6">
        <div id="BarBasicChart"></div>
    </div>
    <div class="col-md-6">
        <div id="PastFiveYear"></div>
    </div>
    <div class="col-md-6">
        <div id="PastFiveYearFunnelChart"></div>
    </div>
    <div class="col-md-6">
        <div id="PastSevenDays"></div>
    </div>
    <div class="col-md-6">
        <div id="YearlySaleAmount"></div>
        <div id="sliders">
            <table>
                <tbody>
                    <tr>
                        <td>
                            <label for="alpha">Alpha Angle</label>
                        </td>
                        <td>
                            <input id="alpha" type="range" min="0" max="45" value="15"> <span id="alpha-value" class="value">25</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="beta">Beta Angle</label>
                        </td>
                        <td>
                            <input id="beta" type="range" min="-45" max="45" value="15"> <span id="beta-value" class="value">19</span>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <label for="depth">Depth</label>
                        </td>
                        <td>
                            <input id="depth" type="range" min="20" max="100" value="50"> <span id="depth-value" class="value">50</span>
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="col-md-6">
        <MudGrid>
            <MudItem xs="6">
                <MudSelect T="int" Label="Year"
                           ValueChanged="HandleValueChanged"
                           Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @if (yearList is not null)
                    {
                        @foreach (var item in yearList)
                        {
                            <MudSelectItem T="int"
                                           Disabled="@(selectedYear == item || secondSelectedYear == item ? true : false)"
                                           Value="@item" />
                        }
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="6">
                <MudSelect T="int" Label="Year" Variant="Variant.Outlined"
                           ValueChanged="HandleValueSecondChanged"
                           AnchorOrigin="Origin.BottomCenter">
                    @if (yearList is not null)
                    {
                        @foreach (var item in yearList)
                        {
                            <MudSelectItem T="int"
                                           Disabled="@(selectedYear == item || secondSelectedYear == item ? true : false)"
                                           Value="@item" />
                        }
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
        <div id="CompareTwoYear"></div>
    </div>
    @*<div class="col-md-6">
    <div id="ProductCategoryAndProduct"></div>
    </div>*@
    <div class="col-md-6">
        <div id="SixMostSoldProducts"></div>
    </div>
    <div class="col-md-6">
        <div id="MaxMinQtyOfProducts"></div>
    </div>
    <div class="col-md-6">
        <div id="FiveYearLineChart"></div>
    </div>
    <div class="col-md-6">
        <div id="ProductCategoryAndProduct"></div>
    </div>
    <div class="col-md-6">
        <div id="MonthlySaleAmount"></div>
    </div>
    <div class="col-md-6">
        <div id="PastFiveYearDailySaleAmount"></div>
    </div>
    <div class="col-md-6">
        <div id="MonthlyRevenueReportOfThreeYear"></div>
    </div>
</div>

@code {
    private List<int> yearList = new();
    private int selectedYear = 0;
    private int secondSelectedYear = 0;
    private List<MonthlyTopFiveProductsOfCurrentYear> _topProductsData;
    private List<ProductInfo>? Series;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await db.GenerateDataByMonth();

            var test = await db.MonthlyRevenueReportForThreeYear();
            var sixSeries = await db.SixMostSoldProducts();
            var sevenDaysData = await db.PastSevenDays();
            var barBasicChartData = await db.QtyOfTopFiveProductsByYear();
            yearList = await db.GetYearList();
            var yearlySaleAmount = await db.YearlySaleAmount();
            var data = await db.CurrentYearTopFiveProductsByMonth();

            var series = data != null ? data : new List<ProductInfo>();
            Series = data != null ? data : new List<ProductInfo>();

            var result = await db.YearOverYearChart(DateTime.Now);
            var pastFiveYear = await db.PastFiveYear(DateTime.Now);
            var funnelChartPastFiveYear = await db.PastFiveYearFunnelChart(DateTime.Now);
            var productsMaxMinQty = await db.MaxMinQtyOfProducts();
            var fiveYearLineChart = await db.FiveYearLineChart();
            var pastFiveYearMonthly = await db.PastFiveYearMonthlySaleAmount(DateTime.Now);
            var pdAndPdCtgy = await db.ProductCategoryAndProduct();
            var pastFiveYearDaily = await db.PastFiveYearsDailyAmount(DateTime.Now);

            // await JsRuntime.InvokeVoidAsync("basicColumnChart", series);
            await JsRuntime.InvokeVoidAsync("barBasicChart",
                barBasicChartData.productNames, barBasicChartData.productInfos);
            await JsRuntime.InvokeVoidAsync("yearlySaleAmount", yearlySaleAmount.category,
                yearlySaleAmount.data);
            await JsRuntime.InvokeVoidAsync("pastFiveYear", pastFiveYear);
            await JsRuntime.InvokeVoidAsync("pastSevenDays", sevenDaysData.days, sevenDaysData.productInfos);
            await JsRuntime.InvokeVoidAsync("pastFiveYearFunnelChart", funnelChartPastFiveYear);
            //await CompareTwoYear(DateTime.Now.Year, DateTime.Now.AddYears(-1).Year);
            await JsRuntime.InvokeVoidAsync("sixMostSoldProducts", sixSeries);
            await JsRuntime.InvokeVoidAsync("maxMinQtyOfProducts", productsMaxMinQty);
            await JsRuntime.InvokeVoidAsync("fiveYearLineChart", fiveYearLineChart);
            await JsRuntime.InvokeVoidAsync("monthlySaleAmount", pastFiveYearMonthly);
            await JsRuntime.InvokeVoidAsync("productCategoryAndProduct", pdAndPdCtgy);
            await JsRuntime.InvokeVoidAsync("pastFiveYearDailySaleAmount", pastFiveYearDaily);
            await JsRuntime.InvokeVoidAsync("monthlyRevenueReportOfThreeYear");
            StateHasChanged();
        }
    }

    async Task HandleValueChanged(int value)
    {
        selectedYear = value;

        if (selectedYear != 0 && secondSelectedYear != 0)
            await CompareTwoYear(selectedYear, secondSelectedYear);
    }

    async Task HandleValueSecondChanged(int value)
    {
        secondSelectedYear = value;

        if (selectedYear != 0 && secondSelectedYear != 0)
            await CompareTwoYear(selectedYear, secondSelectedYear);
    }

    async Task CompareTwoYear(int firstYear, int secondYear)
    {
        var yearLst = new List<string>
        {
            firstYear.ToString(),
            secondSelectedYear.ToString()
        };
        var result = await db.CompareTwoYear(firstYear, secondYear);
        await JsRuntime.InvokeVoidAsync("compareTwoYear", result, yearLst);
    }

}